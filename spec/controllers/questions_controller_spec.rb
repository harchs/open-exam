require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QuestionsController do
  let(:quiz) { create(:quiz) }
  let(:question) {create(:question) }
  before :each do
    require_subdomain
  end

  context "#index" do
    it "should redirect to root" do
      get :index
      response.should redirect_to(root_path)
    end
  end
  
  context "#show" do
    it "should render show.html.erb" do
      get :show, :id => question.id
      response.should render_template("show")
    end  
    it "should assign @question to Question.find_by_id(1)" do
      get :show, :id => question.id
      assigns(:question)
    end  
  end  
  context "#new" do
    # before :each do
    #  user = create(:user)
    #  session[:user_id] = user.id
    # end
    # it "should render new.html.erb" do
    #   get :new, :id => quiz.id
    #   response.should render_template("new")
    # end
    # it "should find @quiz" do
    #   get :new, :quiz_id => quiz.id 
    #   assigns(:quiz).id.should == 1
    # end  
  end

end
